// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4

//
//
#define pi 3.1415926535897932384626

// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}

//------------------------------------------------------------
// LIGHT INFO
//data structure for light
struct pointLight {
	vec3 center; 	 // center point of light
    vec3 color;		 // color of light
    float intensity; // intensity of light
};

void initLight (out pointLight light, in vec3 center, in vec3 color, in float intensity){
	//initialize light variables
    light.center = center;
    light.color = color;
    light.intensity = intensity;
}

//------------------------------------------------------------
// SPHERE INFO
//data structure for spheres
struct sphere{
	vec4 center; //center point of sphere
    float radius;//radius of sphere
};

void initSphere (out sphere obj, in vec3 center, in float radius){
    // initialize sphere variables
	obj.center = asPoint(center);
    obj.radius = radius;
}

//------------------------------------------------------------
// RENDERING FUNCTIONS

color4 crossfade(sampler2D tex1, sampler2D tex2, sCoord location, float time){
    //fade between the two textures
	return mix(texture(tex1, location.xy), 
               texture(tex2, location.xy), 
               sin(time) * 0.5 + 0.5);
}

color4 distortion(sampler2D tex, sScalar ratio, vec2 loc, float time){
    //distort the texture
	return texture(iChannel1, ratio * tan(loc) * tan(loc) + time * 0.5f);
}

vec3 makeNormal(vec3 vector){
    //make a vetor a normal
	float lenInv = 1.0 / length(vector);
    return vector * lenInv;
}

color4 Lambertian (sCoord loc){
    //declare and initialize light
	pointLight light;
    initLight(light, vec3(1, 1, 1.75), vec3(1), 3000.0);   
  	
    //calc normal of location
    vec3 normal = makeNormal(vec3(loc.xy, 1.0));
    
    //calculate light
    float diffCo, attenIn, d, diffIn;
    
    //calc Light diffuse and normalize it
    vec3 L = makeNormal(light.center.xyz - vec3(loc, 1));
    
    //calculate the light diffuse coefficient 
    diffCo = max(0.0, dot(normal, L));
    
    //calc distance from light to surface
    d = distance(loc, light.center.xy);
    
    //calc Attenuation
    float invIn = 1.0 / light.intensity;
    attenIn = 1.0/(1.0 + d * invIn + (d * d) * invIn * invIn);
    
    //calc diffuse intensity
    diffIn = diffCo * attenIn;
    
    //calc diffuse color
    vec4 diffColo = texture(iChannel0, loc);
    
    //calc final colot
    vec3 color = diffIn * diffColo.xyz * light.color;
    return vec4(color, 1);
}

// Source for math: https://stackoverflow.com/questions/14607640/rotating-a-vector-in-3d-space
vec3 rotateRayZ(sRay ray, float rad){
    //declare and initalize initial ray variables
    float x, y, z, x_, y_, z_;
    x = ray.direction.x;
    y = ray.direction.y;
    z = ray.direction.z;

    //ROTATE AROUND THE Z AXIS
    x_ = x * cos(rad) - y * sin(rad);
    y_ = y * sin(rad) + y * cos(rad);
    z_ = z;
    
    //return a stretch to  distort
    return vec3(x_, y_ * sin(iTime), z_);
}

vec3 rotateRayY(sRay ray, float rad){
    //declare and initalize initial ray variables
    float x, y, z, x_, y_, z_;
    x = ray.direction.x;
    y = ray.direction.y;
    z = ray.direction.z;

    //ROTATE AROUND THE Y AXIS
    x_ = x * cos(rad) + z * sin(rad);
	y_ = y;
	z_ = -x * sin(rad) + z * cos(rad);
    
    //return a stretch to  distort
    return vec3(x_, y_ * sin(iTime), z_);
}

vec3 rotateRayX(sRay ray, float rad){
    //declare and initalize initial ray variables
    float x, y, z, x_, y_, z_;
    x = ray.direction.x;
    y = ray.direction.y;
    z = ray.direction.z;
    
    //ROTATE AROUND THE X AXIS
    x_ = x;
	y_ = y * cos(rad) - z * sin(rad);
	z_ = y * sin(rad) + z * cos(rad);
	
    //return a stretch to  distort
    return vec3(x_, y_ * sin(iTime), z_);
}

//Source: Jorzi | https://www.shadertoy.com/view/XdX3DN
color4 blackhole(vec2 pos, sampler2D tex, sCoord loc, sCoord px, float time){
    //calc distance between blackhole and pixel
    float dist = distance(pos, px);
    float distInv = 1.0 / dist;
    
    //calculate warp
    vec2 warp = pos * distInv * distInv * distInv * 200.0; //Jorzi
    warp = warp * -cos(time);
    loc = loc + warp;
   	
    //calc light from singularity
    float light =  clamp(0.05 * dist - 2.0 + abs(cos(time)), 0.0, 1.0); //Jorzi
    
    //calc color around black hole
    color4 color = texture(tex, loc + sin(time));
    
    //
    return color * light;
}

color4 ballLighting(sCoord loc, sRay ray, sampler2D tex){
	//declare and initialize sphere
    sphere obj;
    initSphere(obj, vec3(0.0, 0.0, -4.0), 0.5);
    
    //declare and initialize light
    pointLight light;
    initLight(light, vec3(5, 8, 10), vec3(1), 30000.0); 
	
    //calc point of a hitting ray
    vec3 dp;
    dp.xy = ray.direction.xy - obj.center.xy;
    
    //check if hitting surface
    float lSq = lengthSq(dp.xy),
          rSq = obj.radius * obj.radius;
    
    if (lSq <= rSq){    
		//calc sphere
        dp.z = rSq - lSq;
        
        vec3 position = obj.center.xyz + vec3(dp.x, dp.y, sqrt(dp.z));
        vec3 N = (position - obj.center.xyz) / obj.radius;

        //calculate light
        float diffCo, attenIn, d, diffIn;

        //calc Light diffuse and normalize it
        vec3 L = makeNormal(light.center.xyz - vec3(loc, 1));
        
        //calculate the light diffuse coefficient 
        diffCo = max(0.0, dot(N, L));

        //calc distance from light to surface
        d = distance(dp, light.center);

        //calc Attenuation
    	float invIn = 1.0 / light.intensity;
    	attenIn = 1.0/(1.0 + d * invIn + (d * d) * invIn * invIn);

        //calc diffuse intensity
        diffIn = diffCo * attenIn;
		
        //calc warp for warping images around the sphere
        float warp = atan(N.x/N.z + pi *2.);
        
        //calc sphere color
        vec3 diffColo = texture(tex, loc * warp + sin(iTime)).rgb;
		
        //with light
        vec3 color = diffIn * diffColo * light.color;
        return vec4(color, 1);
    }
    
    //make grey background
    return vec4(0.5);
}

struct effectData{
	sCoord px;
	sDCoord res; 
	sScalar ratio;
	sCoord loc;
};

color4 calcEffect1(effectData dat, sampler2D tex1, sampler2D tex2, float time){
    //effect 1
    //fade between two different textures
	return crossfade(tex1, tex2, dat.loc * dat.ratio, time);
}

color4 calcEffect2(effectData dat, sampler2D tex, float time){
    //effect 2
    //make a distortion for a texture
	return distortion(tex, dat.ratio, dat.loc, time);
}

color4 calcEffect3(effectData dat){
    //effect 3
    //make a light for a 2D texture
	return Lambertian(dat.loc * dat.ratio);
}

color4 calcEffect4(samplerCube tex, sRay ray, float time){
    //effect 4
    //make a skybox with a distortion effect
	return texture(tex, rotateRayY(ray, mod(time, 2. * pi)));
}

color4 calcEffectBonus1(sampler2D tex, effectData dat, float time){
    //effect ex 1
    //make a blackhole in space
	return blackhole(vec2(400.0, 225.0), tex, dat.loc * dat.ratio, dat.px, time);
}

color4 calcEffectBonus2(effectData dat, sRay ray, sampler2D tex){
    //effect ex 2
    //make a ball that lights up
	return ballLighting(dat.loc * dat.ratio, ray, tex);
}

//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    
    effectData dat;
    
    dat.px = vp.pixelCoord;
    dat.res = iChannelResolution[0].xy;
    dat.ratio = dat.res.y * vp.resolutionInv.y;
    dat.loc = dat.px / dat.res;
    
    fragColor += calcEffect1(dat, iChannel0, iChannel1, iTime);
    //fragColor += calcEffect2(dat, iChannel0, iTime);
    //fragColor += calcEffect3(dat);
    //fragColor += calcEffect4(iChannel2, ray, iTime);
    //fragColor += calcEffectBonus1(iChannel1, dat, iTime);
    //fragColor += calcEffectBonus2(dat, ray, iChannel3);
}