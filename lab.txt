// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4

//
//
#define pi 3.1415926535897932384626

// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}

//------------------------------------------------------------
// LIGHT INFO
//data structure for light
struct pointLight {
	vec3 center; 	 // center point of light
    vec3 color;		 // color of light
    float intensity; // intensity of light
};

void initLight (out pointLight light, in vec3 center, in vec3 color, in float intensity){
	//initialize light variables
    light.center = center;
    light.color = color;
    light.intensity = intensity;
}

//------------------------------------------------------------
// RENDERING FUNCTIONS

color4 crossfade(sampler2D tex1, sampler2D tex2, sCoord location, float time){
	return mix(texture(tex1, location.xy), 
               texture(tex2, location.xy), 
               sin(time) * 0.5 + 0.5);
}

vec2 distortion(sScalar ratio, vec2 loc, float time)
{
	return ratio * tan(loc) * tan(loc) + time * 0.5f;
}

color4 Lambertian (sCoord loc){
	pointLight light;
    initLight(light, vec3(1, 1, 1.75), vec3(1), 30000.0);   
  
    vec3 normal = normalize(vec3(loc.xy, 1.0));
    
    //calculate light
    float diffCo, attenIn, d, diffIn;
    
    //calc Light diffuse and normalize it
    vec3 l = light.center.xyz - vec3(loc, 1);
    float lLen = length(l);
    vec3 L = vec3(l.x/lLen, l.y/lLen, l.z/lLen);
    
    //calculate the light diffuse coefficient 
    diffCo = max(0.0, dot(normal, L));
    
    //calc distance from light to surface
    d = sqrt((loc.x - light.center.x) * (loc.x - light.center.x) + 
             (loc.y - light.center.y) * (loc.y - light.center.y));
    
    //calc Attenuation
    attenIn = 1.0/(1.0 + d / light.intensity + (d * d)/ (light.intensity * light.intensity));
    
    //calc diffuse intensity
    diffIn = diffCo * attenIn;
    
    vec4 diffColo = texture(iChannel0, loc);
    
    vec3 color = diffIn * diffColo.xyz * light.color;
    
    return vec4(color, 1);
}



// Source for math: https://stackoverflow.com/questions/14607640/rotating-a-vector-in-3d-space
vec3 rotateRay(sRay ray, float rad, int axis){
    float x, y, z, x_, y_, z_;
    x = ray.direction.x;
    y = ray.direction.y;
    z = ray.direction.z;
    
    switch (axis){
        //ROTATE AROUND THE Z AXIS
    	case (0):
        	x_ = x * cos(rad) - y * sin(rad);
        	y_ = y * sin(rad) + y * cos(rad);
        	z_ = z;
        	break;
        
        //ROTATE AROUND THE Y AXIS
        case (1):
        	x_ = x * cos(rad) + z * sin(rad);
			y_ = y;
			z_ = -x * sin(rad) + z * cos(rad);
        	break;
        
        //ROTATE AROUND THE X AXIS
        case (2):
        	x_ = x;
			y_ = y * cos(rad) - z * sin(rad);
			z_ = y * sin(rad) + z * cos(rad);
        	break;
    }
    return vec3(x_, y_, z_);
}

/*
sampler2D getCubeFace(sRay dir)
{
	samplerCube GL_TEXTURE_CUBE_MAP = iChannel2;
    
}
*/

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    // test inputs
    //return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
    //return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);
    // texture(full-screen)
    
    //sCoord px = vp.pixelCoord;
    //sDCoord res = iChannelResolution[0].xy;
    //sScalar ratio = res.y * vp.resolutionInv.y;
    //sCoord loc = px / res;
    //float time = iTime;
    //loc = ratio * tan(loc) * tan(loc) + time * 0.5f;
    //return texture(iChannel2, vec3(ray.direction.x, ray.direction.y, ray.direction.z) * vec3(loc, ray.direction.z));
    
    
    sCoord px = vp.pixelCoord;
    sDCoord res = iChannelResolution[0].xy;
    sScalar ratio = res.y * vp.resolutionInv.y;
    sCoord loc = px / res;
    loc *= ratio;
    ray.direction.xyz = rotateRay(ray, mod(iTime, 2. * pi), 1);
    //sRay dir = ray.direction.xyz + vec3(mod(iTime, 36.f), 0, 0);
    //sampler2D face = getCubeFace(dir);
    return texture(iChannel2, ray.direction.xyz);
    
	//effect3
    //return Lambertian(loc);
    
    //effect2
    //float time = iTime;
    //loc = distortion(ratio, loc, time);
    //return texture(iChannel1, loc);
    
    //effect 1
    //return crossfade(iChannel0, iChannel1, loc, iTime);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}