//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4

//definition of pi
#define pi 3.1415926535897932384626

// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4

// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v){
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v){
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
//    x: input whose squared length to calculate
sScalar lengthSq(sScalar x){
    return (x * x);
    //return dot(x, x); // for consistency with others
}

sScalar lengthSq(sDCoord x){
    return dot(x, x);
}

sScalar lengthSq(sBasis x){
    return dot(x, x);
}

sScalar lengthSq(sVector x){
    return dot(x, x);
}

//------------------------------------------------------------
// VIEWPORT INFO
//------------------------------------------------------------

// sViewport: info about viewport
struct sViewport{
    sPoint viewportPoint;	// location on the viewing plane 
							// x = horizontal position
							// y = vertical position
							// z = plane depth (negative focal length)
    
	sCoord pixelCoord;		// position of pixel in image
							// x = [0, width)	-> [left, right)
							// y = [0, height)	-> [bottom, top)
    
	sDCoord resolution;		// resolution of viewport
							// x = image width in pixels
							// y = image height in pixels
    
	sDCoord resolutionInv;	// resolution reciprocal
							// x = reciprocal of image width
							// y = reciprocal of image height
    
	sDCoord size;			// in-scene dimensions of viewport
							// x = viewport width in scene units
							// y = viewport height in scene units
    
	sCoord ndc;				// normalized device coordinate
							// x = [-1, +1) -> [left, right)
							// y = [-1, +1) -> [bottom, top)
    
	sCoord uv;				// screen-space (UV) coordinate
							// x = [0, 1) -> [left, right)
							// y = [0, 1) -> [bottom, top)
        
	sScalar aspectRatio;	// aspect ratio of viewport
    
	sScalar focalLength;	// distance to viewing plane
};
    
// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution){
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}

//------------------------------------------------------------
// RAY INFO
//------------------------------------------------------------

// sRay: info about the ray shot from camera
struct sRay{
    sPoint origin;		//origin point in scene
    
    sVector direction;	//direction vector in scene
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport){
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

//------------------------------------------------------------
// Geometry FUNCTIONS
//------------------------------------------------------------

// sSphere: infor about spheres
struct sSphere{
	vec4 center;  // center point of sphere
    float radius; // radius of sphere
};

// initViewport: Set values for sphere
//    obj: 		    output sphere
//    center: 		input position of sphere
//    radius: 		input radius of sphere
void initSphere (out sSphere obj, in vec3 center, in float radius){
    // initialize sphere variables
	obj.center = asPoint(center);
    obj.radius = radius;
}


//------------------------------------------------------------
// RENDERING FUNCTIONS
//------------------------------------------------------------

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray){
    sSphere obj; 
    initSphere(obj, vec3(0.0, 0.0, -4.0), 0.5);
    
    //calc point of a hitting ray
    vec3 dp;
    dp.xy = ray.direction.xy - obj.center.xy;
    
    //check if hitting surface
    float lSq = lengthSq(dp.xy),
          rSq = obj.radius * obj.radius;
    if (lSq <= rSq){  
        
        //calc sphere
        dp.z = rSq - lSq;
        
        //calc position and normalize it
        vec3 position = obj.center.xyz + vec3(dp.x, dp.y, sqrt(dp.z));
        vec3 N = (position - obj.center.xyz) / obj.radius;
        
        color3 color = N * 0.5 + 0.5;
        
        //return color
        return vec4 (color , 1.0);
    }
    
    // BACKGROUND
	const vec3 warm = vec3(0.8, 0.4, 0.2), cool = vec3(0.2, 0.4, 0.8);
	return vec4(mix(warm, cool, ray.direction.y), 1.0);
}