// Code by Rhys Sullivan and Andrew Hunt
#define pi 3.1415926535897932384626
vec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) 
{
    vec2 xy = fragCoord - size / 2.0;
    float z = size.y / tan(radians(fieldOfView) / 2.0);
    return normalize(vec3(xy, -z));
}

//------------------------------------------------------------
// Geometry FUNCTIONS
//------------------------------------------------------------

// sSphere: infor about spheres
struct sSphere{
	vec4 center;  // center point of sphere
    float radius; // radius of sphere
};

// initViewport: Set values for sphere
//    obj: 		    output sphere
//    center: 		input position of sphere
//    radius: 		input radius of sphere
void initSphere (out sSphere obj, in vec3 center, in float radius)
{
    // initialize sphere variables
	obj.center = vec4(center,1.);
    obj.radius = radius;
}

// Distance functions from: 
// https://iquilezles.org/www/articles/distfunctions/distfunctions.htm
// http://blog.hvidtfeldts.net/index.php/2011/09/distance-estimated-3d-fractals-v-the-mandelbulb-different-de-approximations/

float mandelbulb(vec3 pos, float iTime) {
	vec3 z = pos;
	float dr = 1.0;
	float r = 0.0;
	for (int i = 0; i < 6 ; i++) {
		r = length(z);
		if (r>1.5) break;
		
		// convert to polar coordinates
		float theta = acos(z.z/r);
		float phi = atan(z.y,z.x);
		dr =  pow( r, 6.-1.0)*6.*dr + 1.0;
		
		// scale and rotate the point
		float zr = pow( r,6.);
		theta = theta*6.+iTime;
		phi = phi*6.+iTime;
		
		// convert back to cartesian coordinates
		z = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));
		z+=pos;
	}
	return 0.5*log(r)*r/dr;                
}

float sphereSDF(vec3 p, float r) 
{
    return length(p) - r;
}

float sdBox( vec3 p, vec3 b )
{
  vec3 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

float sdTorus(vec3 pos, vec2 t)
{
	vec2 q = vec2(length(pos.xz) - t.x, pos.y);
    return length(q) - t.y;
}

float sdPlane(vec3 pos, vec3 normals, float h)
{
	return dot(pos, normals) + h;
}

float sdCone( in vec3 p, in vec2 c, float h )
{
  vec2 q = h*vec2(c.x/c.y,-1.0);
    
  vec2 w = vec2( length(p.xz), p.y );
  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );
  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );
  float k = sign( q.y );
  float d = min(dot( a, a ),dot(b, b));
  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );
  return sqrt(d)*sign(s);
}

float sdoctahedron(vec3 pos, float size)
{
	pos = abs(pos);
    float m = pos.x + pos.y + pos.z - size;
    vec3 q;
    
    if 		(3.0 * pos.x < m) q = pos.xyz;
    else if (3.0 * pos.y < m) q = pos.yzx;
    else if (3.0 * pos.z < m) q = pos.zxy;
    else 	return m * 0.57735027;
        
    float k = clamp(0.5 * (q.z - q.y + size), 0.0, size);
    return length(vec3(q.x, q.y - size + k, q.z-k));
}

float intersectSDF(float distA, float distB) {
    return max(distA, distB);
}

float unionSDF(float distA, float distB) {
    return min(distA, distB);
}

float differenceSDF(float distA, float distB) {
    return max(distA, -distB);
}


//------------------------------------------------------------
// RENDERING FUNCTIONS
//------------------------------------------------------------

// rotateCamera: take in radians and rotate camera
//    ray: 		    ray that we are manipulating
//    rad: 			radial input on a 2D grid
mat3 rotate(vec2 rad){
    //grab trig of mouse input y
    float cosNumY = cos(-rad.y + pi);
    float sinNumY = sin(-rad.y + pi);
    
    //grab trig of mouse input x
    float cosNumX = cos(-rad.x + pi);
    float sinNumX = sin(-rad.x + pi);
    
    //get roptation matrix
    mat3 rm = mat3(   cosNumX, sinNumX * sinNumY,    sinNumX * cosNumY,
            	         	0, 	         cosNumY,         	  -sinNumY, 
                     -sinNumX, cosNumX * sinNumY,    cosNumY * cosNumX);
    
    
    //return rotation
   	return rm;
}

struct FPointLight
{
 	vec3 center;
    vec3 color;
    float intensity;
};
  
void initPointLight(out FPointLight pLight, vec3 center, vec3 color, float intensity)
{
    pLight.center = center;
    pLight.color = color;
    pLight.intensity = intensity;    
}
    

float diffuseIntensity(vec3 surfacePosition, vec3 surfaceNormal, vec3 lightPos, float lightInten)
{
 	float kD; // diffuse coefficient
    float iL; // Attenuation    
	vec3 L = normalize(lightPos - surfacePosition); // light position
    
    kD = dot(surfaceNormal, L); // check how aligned the light and normal are
    kD = max(0., kD);
	float d = length(lightPos - surfacePosition);
    
    iL = 1. / (1. + (d / lightInten) + ( (d * d) / (lightInten * lightInten) ));   
    return kD * iL;
}

float phongReflectance(vec3 pos, vec3 norm, FPointLight pLight, vec3 rayOrigin)
{
   // Phong Reflectance
   vec3 L = normalize(vec3(pLight.center) - pos); // Light Vector        
   vec3 V = normalize(rayOrigin - pos); // View Vector
   vec3 R = reflect(-L, norm);
   float kS = dot(V,R);   
   kS = max(kS, 0.);
    
   float iS = pow(kS, 16.);
   return iS;
}

// MATHS
//https://www.brainvoyager.com/bv/doc/UsersGuide/CoordsAndTransforms/SpatialTransformationMatrices.html
mat4 rotateY(float theta) {
    float c = cos(theta);
    float s = sin(theta);

    return mat4(
        vec4(c, 0, s, 0),
        vec4(0, 1, 0, 0),
        vec4(-s, 0, c, 0),
        vec4(0, 0, 0, 1)
    );
}

mat4 rotateX(float theta) {
    float c = cos(theta);
    float s = sin(theta);

    return mat4(
        vec4(1., 0, 0., 0),
        vec4(0, c, s, 0),
        vec4(0., -s, c, 0),
        vec4(0, 0, 0, 1.)
    );
}

mat4 rotateZ(float theta) {
    float c = cos(theta);
    float s = sin(theta);

    return mat4(
        vec4(c, -s, 0., 0),
        vec4(s, c, 0., 0),
        vec4(0., 0, 1, 0),
        vec4(0, 0, 0, 1.)
    );
}